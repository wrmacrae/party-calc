{"version":3,"sources":["components/Odds.jsx","App.js","index.js"],"names":["cell","d","dindex","key","data","row","p","index","map","y","shuffle","a","j","x","i","length","Math","floor","random","Odds","props","state","deck","clerics","rogues","warriors","wizards","paragons","haveparagons","handleInputChange","bind","handleClick","event","target","checked","name","this","setState","value","parseInt","s","b","c","ha","hb","hc","hd","hp","isNaN","partyByDraw","Array","fill","needs","startingParty","push","t","firsts","v","indexOf","filter","party","includes","count","calculate","haveclerics","haverogues","havewarriors","havewizards","className","html-for","type","id","min","defaultValue","onChange","series","bar","rx","ry","rounded","padding","gradient","rangeLines","position","strokeWidth","guide","colorScheme","height","width","style","onClick","React","Component","App","render","document","getElementById"],"mappings":"sPAIA,SAASA,EAAKC,EAAGC,GACf,MAAO,CACLC,IAAK,GAAKD,EACVE,KAAMH,GAGV,SAASI,EAAIC,EAAGC,GACd,MAAO,CACLJ,IAAK,KAAOI,EAAQ,GACpBH,KAAME,EAAEE,IAAIR,GACZS,EAAG,iBAIP,SAASC,EAAQC,GACf,IAAIC,EAAGC,EAAGC,EACV,IAAKA,EAAIH,EAAEI,OAAS,EAAGD,EAAI,EAAGA,IAC1BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAIF,EAAEG,GACNH,EAAEG,GAAKH,EAAEC,GACTD,EAAEC,GAAKC,EAEX,OAAOF,E,IAwEYQ,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,QAAS,EACTC,OAAQ,EACRC,SAAU,EACVC,QAAS,EACTC,SAAU,EACVC,aAAc,GAGhB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAbF,E,wDAgBPE,GACV,IAAMC,EAASD,EAAMC,OACfC,EAAUD,EAAOC,QACjBC,EAAOF,EAAOE,KACpBC,KAAKC,SAAL,eACGF,EAAOD,M,wCAIMF,GAChB,IAAMC,EAASD,EAAMC,OACfK,EAAQL,EAAOK,MACfH,EAAOF,EAAOE,KACpBC,KAAKC,SAAL,eACGF,EAAOI,SAASD,O,+BAKnB,IACIlC,EA1GR,SAAmBoC,EAAG7B,EAAG8B,EAAGC,EAAGzC,EAAGK,EAAGqC,EAAIC,EAAIC,EAAIC,EAAIC,IAC1C,MAALpC,GAAaqC,MAAMrC,MACrBA,EAAI,IAEG,MAAL8B,GAAaO,MAAMP,MACrBA,EAAI,IAEG,MAALC,GAAaM,MAAMN,MACrBA,EAAI,IAEG,MAALzC,GAAa+C,MAAM/C,MACrBA,EAAI,IAEG,MAALK,GAAa0C,MAAM1C,MACrBA,EAAI,IAEG,MAALkC,GAAaQ,MAAMR,IAAMA,EAAI7B,EAAE8B,EAAEC,EAAEzC,EAAEK,KACvCkC,EAAI7B,EAAE8B,EAAEC,EAAEzC,EAAEK,GAEd,IAAI2C,EAAcC,MAAMV,GAAGW,KAAK,GAAG3C,KAAI,SAAAK,GAAC,OAAIqC,MAAM,GAAGC,KAAK,MACtD7B,EAAO,IAAI4B,MAAMV,GACrBlB,EAAK6B,KAAK,KACV7B,EAAK6B,KAAK,IAAK,EAAGxC,GAClBW,EAAK6B,KAAK,IAAKxC,EAAGA,EAAE8B,GACpBnB,EAAK6B,KAAK,IAAKxC,EAAE8B,EAAG9B,EAAE8B,EAAEC,GACxBpB,EAAK6B,KAAK,IAAKxC,EAAE8B,EAAEC,EAAG/B,EAAE8B,EAAEC,EAAEzC,GAC5BqB,EAAK6B,KAAK,IAAKxC,EAAE8B,EAAEC,EAAEzC,EAAGU,EAAE8B,EAAEC,EAAEzC,EAAEK,GAChC,IAAI8C,EAAQ,GACRC,EAAgB,EAChBV,EACFU,GAAiB,EAEjBD,EAAME,KAAK,KAETV,EACFS,GAAiB,EAEjBD,EAAME,KAAK,KAETT,EACFQ,GAAiB,EAEjBD,EAAME,KAAK,KAETR,EACFO,GAAiB,EAEjBD,EAAME,KAAK,KAEbD,GAAiBN,EAEjB,IADA,IACSQ,EAAI,EAAGA,EADD,IACaA,IAAK,CAC/B7C,EAAQY,GACR,IAAIkC,EAASJ,EAAM5C,KAAI,SAAAiD,GAAC,OAAInC,EAAKoC,QAAQD,MACzCD,EAAOG,QAAO,SAAAF,GAAC,OAAW,IAAPA,KAEnB,IADA,IAAIG,EAAQP,EACHvC,EAAI,EAAGA,EAAI0B,EAAG1B,KACjB0C,EAAOK,SAAS/C,IAAkB,MAAZQ,EAAKR,MAC7B8C,GAAS,GACG,IACVA,EAAQ,GAGZX,EAAYnC,GAAG8C,IAAU,EAG7B,OAAOX,EAAYzC,KAAI,SAAAH,GAAG,OAAIA,EAAIG,KAAI,SAAAsD,GAAK,OAAIA,EAhBhC,IAgBiD,UAuC1CC,CAAU3B,KAAKf,MAAMC,KAAMc,KAAKf,MAAME,QAASa,KAAKf,MAAMG,OAAQY,KAAKf,MAAMI,SAAUW,KAAKf,MAAMK,QAASU,KAAKf,MAAMM,SAAUS,KAAKf,MAAM2C,YAAa5B,KAAKf,MAAM4C,WAAY7B,KAAKf,MAAM6C,aAAc9B,KAAKf,MAAM8C,YAAa/B,KAAKf,MAAMO,cACxOpB,IAAIH,GAC3B,OAAO,yBAAK+D,UAAU,QACpB,yBAAKA,UAAU,QACb,2BAAOC,WAAS,QAAhB,oBAA+C,2BAAOD,UAAU,SAASE,KAAK,SAASC,GAAG,OAAOpC,KAAK,OAAOqC,IAAI,IAAIC,aAAa,KAAKC,SAAUtC,KAAKP,oBACtJ,2BAAOwC,WAAS,WAAhB,cAA4C,2BAAOD,UAAU,SAASE,KAAK,SAASC,GAAG,UAAUpC,KAAK,UAAUqC,IAAI,IAAIC,aAAa,IAAIC,SAAUtC,KAAKP,oBACxJ,2BAAOwC,WAAS,UAAhB,aAA0C,2BAAOD,UAAU,SAASE,KAAK,SAASC,GAAG,SAASpC,KAAK,SAASqC,IAAI,IAAIC,aAAa,IAAIC,SAAUtC,KAAKP,oBACpJ,2BAAOwC,WAAS,YAAhB,eAA8C,2BAAOD,UAAU,SAASE,KAAK,SAASC,GAAG,WAAWpC,KAAK,WAAWqC,IAAI,IAAIC,aAAa,IAAIC,SAAUtC,KAAKP,oBAC5J,2BAAOwC,WAAS,WAAhB,cAA4C,2BAAOD,UAAU,SAASE,KAAK,SAASC,GAAG,UAAUpC,KAAK,UAAUqC,IAAI,IAAIC,aAAa,IAAIC,SAAUtC,KAAKP,oBACxJ,2BAAOwC,WAAS,YAAhB,YAA2C,2BAAOD,UAAU,SAASE,KAAK,SAASC,GAAG,WAAWpC,KAAK,WAAWqC,IAAI,IAAIC,aAAa,IAAIC,SAAUtC,KAAKP,qBAE3J,kBAAC,kBAAD,CACQzB,KAAMA,EACNuE,OACE,kBAAC,mBAAD,CACEC,IACE,kBAAC,MAAD,CACEzE,IAAI,yBACJ0E,GAAI,EACJC,GAAI,EACJC,SAAS,EACTC,QAAS,EACTC,UAAU,EACVC,WAAY,kBAAC,aAAD,CAAYC,SAAS,MAAMC,YAAa,IACpDC,OAAO,IAGXC,YAAa,CAAC,UAAW,UAAW,UAAW,UAAW,aAG9DC,OAAQ,MAChB,yBAAKnB,UAAU,UACb,yBAAKA,UAAU,eACb,yBAAKoB,MAAM,KAAKD,OAAO,MACrB,0BAAMC,MAAM,KAAKD,OAAO,KAAKE,MAAO,CAACtC,KAAM,cAF/C,iBAKA,yBAAKiB,UAAU,eACb,yBAAKoB,MAAM,KAAKD,OAAO,MACrB,0BAAMC,MAAM,KAAKD,OAAO,KAAKE,MAAO,CAACtC,KAAM,cAF/C,iBAKA,yBAAKiB,UAAU,eACb,yBAAKoB,MAAM,KAAKD,OAAO,MACrB,0BAAMC,MAAM,KAAKD,OAAO,KAAKE,MAAO,CAACtC,KAAM,cAF/C,iBAKA,yBAAKiB,UAAU,eACb,yBAAKoB,MAAM,KAAKD,OAAO,MACrB,0BAAMC,MAAM,KAAKD,OAAO,KAAKE,MAAO,CAACtC,KAAM,cAF/C,iBAKA,yBAAKiB,UAAU,eACb,yBAAKoB,MAAM,KAAKD,OAAO,MACrB,0BAAMC,MAAM,KAAKD,OAAO,KAAKE,MAAO,CAACtC,KAAM,cAF/C,kBAMF,yBAAKiB,UAAU,iBAAf,kBAEE,2BAAOC,WAAS,eAAhB,aAA+C,2BAAOD,UAAU,WAAWE,KAAK,WAAWC,GAAG,cAAcpC,KAAK,cAAcuD,QAAStD,KAAKL,cAC7I,2BAAOsC,WAAS,cAAhB,YAA6C,2BAAOD,UAAU,WAAWE,KAAK,WAAWC,GAAG,aAAapC,KAAK,aAAauD,QAAStD,KAAKL,cACzI,2BAAOsC,WAAS,gBAAhB,cAAiD,2BAAOD,UAAU,WAAWE,KAAK,WAAWC,GAAG,eAAepC,KAAK,eAAeuD,QAAStD,KAAKL,cACjJ,2BAAOsC,WAAS,eAAhB,aAA+C,2BAAOD,UAAU,WAAWE,KAAK,WAAWC,GAAG,cAAcpC,KAAK,cAAcuD,QAAStD,KAAKL,cAC7I,2BAAOsC,WAAS,gBAAhB,YAA+C,2BAAOD,UAAU,SAASE,KAAK,SAASC,GAAG,eAAepC,KAAK,eAAeqC,IAAI,IAAIC,aAAa,IAAIC,SAAUtC,KAAKP,0B,GApG3I8D,IAAMC,WClFzBC,MAZf,WAEE,OACE,yBAAKzB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCJR0B,iBACE,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.86dda3e7.chunk.js","sourcesContent":["import React from 'react';\nimport { StackedBarChart, StackedBarSeries, Bar, RangeLines } from 'reaviz';\nimport './Odds.css';\n\nfunction cell(d, dindex) {\n  return {\n    key: \"\" + dindex,\n    data: d};\n}\n\nfunction row(p, index) {\n  return {\n    key: \" \" + (index + 1),\n    data: p.map(cell),\n    y: \"% Probability\"\n  };\n}\n\nfunction shuffle(a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n  }\n  return a;\n}\n\nfunction calculate(s, a, b, c, d, p, ha, hb, hc, hd, hp) {\n  if (a == null || isNaN(a)) {\n    a = 0;\n  }\n  if (b == null || isNaN(b)) {\n    b = 0;\n  }\n  if (c == null || isNaN(c)) {\n    c = 0;\n  }\n  if (d == null || isNaN(d)) {\n    d = 0;\n  }\n  if (p == null || isNaN(p)) {\n    p = 0;\n  }\n  if (s == null || isNaN(s) || s < a+b+c+d+p) {\n    s = a+b+c+d+p;\n  }\n  let partyByDraw = Array(s).fill(0).map(x => Array(5).fill(0));\n  let deck = new Array(s);\n  deck.fill(\"Z\");\n  deck.fill(\"A\", 0, a);\n  deck.fill(\"B\", a, a+b);\n  deck.fill(\"C\", a+b, a+b+c);\n  deck.fill(\"D\", a+b+c, a+b+c+d);\n  deck.fill(\"P\", a+b+c+d, a+b+c+d+p)\n  var needs = []\n  var startingParty = 0\n  if (ha) {\n    startingParty += 1;\n  } else {\n    needs.push(\"A\");\n  }\n  if (hb) {\n    startingParty += 1;\n  } else {\n    needs.push(\"B\");\n  }\n  if (hc) {\n    startingParty += 1;\n  } else {\n    needs.push(\"C\");\n  }\n  if (hd) {\n    startingParty += 1;\n  } else {\n    needs.push(\"D\");\n  }\n  startingParty += hp;\n  const trials = 100000;\n  for (var t = 0; t < trials; t++) {\n    shuffle(deck);\n    var firsts = needs.map(v => deck.indexOf(v))\n    firsts.filter(v => v !== -1);\n    var party = startingParty;\n    for (var i = 0; i < s; i++) {\n      if (firsts.includes(i) || deck[i] === \"P\") {\n        party += 1;\n        if (party > 4) {\n          party = 4;\n        }\n      }\n      partyByDraw[i][party] += 1;\n    }\n  }\n  return partyByDraw.map(row => row.map(count => count / trials * 100));\n}\n\nexport default class Odds extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: 40,\n      clerics: 2,\n      rogues: 3,\n      warriors: 2,\n      wizards: 1,\n      paragons: 0,\n      haveparagons: 0\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    const target = event.target;\n    const checked = target.checked;\n    const name = target.name;\n    this.setState({\n      [name]: checked\n    });\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: parseInt(value)\n    });\n  }\n\n  render() {\n    const partyByDraw = calculate(this.state.deck, this.state.clerics, this.state.rogues, this.state.warriors, this.state.wizards, this.state.paragons, this.state.haveclerics, this.state.haverogues, this.state.havewarriors, this.state.havewizards, this.state.haveparagons);\n    var data = partyByDraw.map(row);\n    return <div className=\"page\">\n      <div className=\"form\">\n        <label html-for=\"deck\"> Cards in deck: </label><input className=\"numbox\" type=\"number\" id=\"deck\" name=\"deck\" min=\"0\" defaultValue=\"40\" onChange={this.handleInputChange} />\n        <label html-for=\"clerics\"> Clerics: </label><input className=\"numbox\" type=\"number\" id=\"clerics\" name=\"clerics\" min=\"0\" defaultValue=\"2\" onChange={this.handleInputChange} />\n        <label html-for=\"rogues\"> Rogues: </label><input className=\"numbox\" type=\"number\" id=\"rogues\" name=\"rogues\" min=\"0\" defaultValue=\"3\" onChange={this.handleInputChange} />\n        <label html-for=\"warriors\"> Warriors: </label><input className=\"numbox\" type=\"number\" id=\"warriors\" name=\"warriors\" min=\"0\" defaultValue=\"2\" onChange={this.handleInputChange} />\n        <label html-for=\"wizards\"> Wizards: </label><input className=\"numbox\" type=\"number\" id=\"wizards\" name=\"wizards\" min=\"0\" defaultValue=\"1\" onChange={this.handleInputChange} />\n        <label html-for=\"paragons\"> Wilds: </label><input className=\"numbox\" type=\"number\" id=\"paragons\" name=\"paragons\" min=\"0\" defaultValue=\"0\" onChange={this.handleInputChange} />\n      </div>\n      <StackedBarChart\n              data={data}\n              series={\n                <StackedBarSeries\n                  bar={\n                    <Bar\n                      key=\"stacked-normalized-bar\"\n                      rx={0}\n                      ry={0}\n                      rounded={false}\n                      padding={0}\n                      gradient={false}\n                      rangeLines={<RangeLines position=\"top\" strokeWidth={3} />}\n                      guide={false}\n                    />\n                  }\n                  colorScheme={[\"#1f77b4\", \"#aec7e8\", \"#ff7f0e\", \"#ffbb78\", \"#2ca02c\"]}\n                />\n              }\n              height={500} />\n      <div className=\"legend\">\n        <div className=\"legendEntry\">\n          <svg width=\"20\" height=\"20\">\n            <rect width=\"20\" height=\"20\" style={{fill: \"#1f77b4\"}} />\n          </svg> = Party of 0\n        </div>\n        <div className=\"legendEntry\">\n          <svg width=\"20\" height=\"20\">\n            <rect width=\"20\" height=\"20\" style={{fill: \"#aec7e8\"}} />\n          </svg> = Party of 1\n        </div>\n        <div className=\"legendEntry\">\n          <svg width=\"20\" height=\"20\">\n            <rect width=\"20\" height=\"20\" style={{fill: \"#ff7f0e\"}} />\n          </svg> = Party of 2\n          </div>\n        <div className=\"legendEntry\">\n          <svg width=\"20\" height=\"20\">\n            <rect width=\"20\" height=\"20\" style={{fill: \"#ffbb78\"}} />\n          </svg> = Party of 3\n          </div>\n        <div className=\"legendEntry\">\n          <svg width=\"20\" height=\"20\">\n            <rect width=\"20\" height=\"20\" style={{fill: \"#2ca02c\"}} />\n          </svg> = Party of 4\n        </div>\n      </div>\n      <div className=\"form bot page\">\n        Already Have --\n        <label html-for=\"haveclerics\"> Clerics:</label><input className=\"checkbox\" type=\"checkbox\" id=\"haveclerics\" name=\"haveclerics\" onClick={this.handleClick} />\n        <label html-for=\"haverogues\"> Rogues:</label><input className=\"checkbox\" type=\"checkbox\" id=\"haverogues\" name=\"haverogues\" onClick={this.handleClick} />\n        <label html-for=\"havewarriors\"> Warriors:</label><input className=\"checkbox\" type=\"checkbox\" id=\"havewarriors\" name=\"havewarriors\" onClick={this.handleClick} />\n        <label html-for=\"havewizards\"> Wizards:</label><input className=\"checkbox\" type=\"checkbox\" id=\"havewizards\" name=\"havewizards\" onClick={this.handleClick} />\n        <label html-for=\"haveparagons\"> Wilds: </label><input className=\"numbox\" type=\"number\" id=\"haveparagons\" name=\"haveparagons\" min=\"0\" defaultValue=\"0\" onChange={this.handleInputChange} />\n      </div>\n    </div>;\n  }\n}","import React from 'react';\nimport './App.css';\nimport Odds from './components/Odds';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Odds />\n      </header> \n    </div>\n  );\n        // <label for=\"paragons\"> Paragons: <input class=\"paragons\" type=\"number\" id=\"paragons\" name=\"paragons\" min=\"0\" /></label>\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nrender(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}