{"version":3,"sources":["components/Odds.jsx","App.js","index.js"],"names":["cell","d","dindex","key","data","row","p","index","map","y","shuffle","a","j","x","i","length","Math","floor","random","clerics","require","rogues","warriors","wizards","wilds","cardToClass","card","Odds","props","state","deck","paragons","haveparagons","handleInputChange","bind","handleClick","event","target","checked","name","this","setState","value","processUpload","parseInt","upload","split","sideboardIndex","indexOf","slice","counts","reduce","line","charAt","withoutSetInfo","number","substring","trim","undefined","console","log","s","b","c","ha","hb","hc","hd","hp","isNaN","partyByDraw","Array","fill","needs","startingParty","push","t","firsts","v","filter","party","includes","count","calculate","haveclerics","haverogues","havewarriors","havewizards","className","html-for","type","id","min","defaultValue","onChange","series","bar","rx","ry","rounded","padding","gradient","rangeLines","position","strokeWidth","guide","colorScheme","height","width","style","onClick","React","Component","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ccb4cf2.chunk.js","sourcesContent":["import React from 'react';\nimport { StackedBarChart, StackedBarSeries, Bar, RangeLines } from 'reaviz';\nimport './Odds.css';\n\nfunction cell(d, dindex) {\n  return {\n    key: \"\" + dindex,\n    data: d};\n}\n\nfunction row(p, index) {\n  return {\n    key: \" \" + (index + 1),\n    data: p.map(cell),\n    y: \"% Probability\"\n  };\n}\n\nfunction shuffle(a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n  }\n  return a;\n}\n\nfunction calculate(s, a, b, c, d, p, ha, hb, hc, hd, hp) {\n  if (a == null || isNaN(a)) {\n    a = 0;\n  }\n  if (b == null || isNaN(b)) {\n    b = 0;\n  }\n  if (c == null || isNaN(c)) {\n    c = 0;\n  }\n  if (d == null || isNaN(d)) {\n    d = 0;\n  }\n  if (p == null || isNaN(p)) {\n    p = 0;\n  }\n  if (s == null || isNaN(s) || s < a+b+c+d+p) {\n    s = a+b+c+d+p;\n  }\n  let partyByDraw = Array(s).fill(0).map(x => Array(5).fill(0));\n  let deck = new Array(s);\n  deck.fill(\"Z\");\n  deck.fill(\"A\", 0, a);\n  deck.fill(\"B\", a, a+b);\n  deck.fill(\"C\", a+b, a+b+c);\n  deck.fill(\"D\", a+b+c, a+b+c+d);\n  deck.fill(\"P\", a+b+c+d, a+b+c+d+p)\n  var needs = []\n  var startingParty = 0\n  if (ha) {\n    startingParty += 1;\n  } else {\n    needs.push(\"A\");\n  }\n  if (hb) {\n    startingParty += 1;\n  } else {\n    needs.push(\"B\");\n  }\n  if (hc) {\n    startingParty += 1;\n  } else {\n    needs.push(\"C\");\n  }\n  if (hd) {\n    startingParty += 1;\n  } else {\n    needs.push(\"D\");\n  }\n  startingParty += hp;\n  const trials = 100000;\n  for (var t = 0; t < trials; t++) {\n    shuffle(deck);\n    var firsts = needs.map(v => deck.indexOf(v))\n    firsts.filter(v => v !== -1);\n    var party = startingParty;\n    for (var i = 0; i < s; i++) {\n      if (firsts.includes(i) || deck[i] === \"P\") {\n        party += 1;\n        if (party > 4) {\n          party = 4;\n        }\n      }\n      partyByDraw[i][party] += 1;\n    }\n  }\n  return partyByDraw.map(row => row.map(count => count / trials * 100));\n}\n\nconst clerics = require('../clerics.json');\nconst rogues = require('../rogues.json');\nconst warriors = require('../warriors.json');\nconst wizards = require('../wizards.json');\nconst wilds = require('../wilds.json');\nconst cardToClass = {}\nclerics.map(card => cardToClass[card] = \"clerics\")\nrogues.map(card => cardToClass[card] = \"rogues\")\nwarriors.map(card => cardToClass[card] = \"warriors\")\nwizards.map(card => cardToClass[card] = \"wizards\")\nwilds.map(card => cardToClass[card] = \"wilds\")\n\nexport default class Odds extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: 40,\n      clerics: 2,\n      rogues: 3,\n      warriors: 2,\n      wizards: 1,\n      paragons: 0,\n      haveparagons: 0\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    const target = event.target;\n    const checked = target.checked;\n    const name = target.name;\n    this.setState({\n      [name]: checked\n    });\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    if (name === \"upload\") {\n      this.processUpload(value);\n    } else {\n      this.setState({\n        [name]: parseInt(value)\n      });\n    }\n  }\n\n  processUpload(upload) {\n    var deck = upload.split(\"\\n\");\n    const sideboardIndex = deck.indexOf(\"Sideboard\");\n    if (sideboardIndex !== -1) {\n      deck = deck.slice(0, sideboardIndex);\n    }\n    var counts = {\n      deck: 0,\n      clerics: 0,\n      rogues: 0,\n      warriors: 0,\n      wizards: 0,\n      wilds: 0\n    };\n    deck.reduce(((counts, line) => {\n      if (line !== \"\" && line.charAt(0) >= '0' && line.charAt(0) <= '9' ) {\n        const withoutSetInfo = line.split(\"(\")[0];\n        const number = parseInt(withoutSetInfo.split()[0]);\n        const name = withoutSetInfo.substring(withoutSetInfo.indexOf(\" \") + 1).trim();\n        if (cardToClass.[name] !== undefined) {\n          console.log(cardToClass.[name]);  \n          counts.[cardToClass.[name]] += number;\n        }\n        counts.deck += number;\n      }\n      return counts;\n    }), counts);\n    console.log(counts);\n    this.setState(counts);\n  }\n\n  render() {\n    const partyByDraw = calculate(this.state.deck, this.state.clerics, this.state.rogues, this.state.warriors, this.state.wizards, this.state.paragons, this.state.haveclerics, this.state.haverogues, this.state.havewarriors, this.state.havewizards, this.state.haveparagons);\n    var data = partyByDraw.map(row);\n    return <div className=\"page\">\n      <div className=\"explanation\">\n      <p>This chart shows the probability of seeing enough classes for each size of party.<br/>The number of cards seen is the X axis of the chart, and the Y axis is percent probabilities. Each color represents a different sized party.<br/>You can change the numbers in the boxes above the chart or paste your deck below the chart.<br/>You can set options along the bottom to represent already having a class or wild.<br/>Note: seen cards aren't always on the battlefield, so your party may be smaller!</p>\n      </div>\n      <div className=\"form\">\n        <label html-for=\"deck\"> Cards in deck: </label><input className=\"numbox\" type=\"number\" id=\"deck\" name=\"deck\" min=\"0\" defaultValue=\"40\" onChange={this.handleInputChange} value={this.state.deck} />\n        <label html-for=\"clerics\"> Clerics: </label><input className=\"numbox\" type=\"number\" id=\"clerics\" name=\"clerics\" min=\"0\" defaultValue=\"2\" onChange={this.handleInputChange} value={this.state.clerics} />\n        <label html-for=\"rogues\"> Rogues: </label><input className=\"numbox\" type=\"number\" id=\"rogues\" name=\"rogues\" min=\"0\" defaultValue=\"3\" onChange={this.handleInputChange} value={this.state.rogues} />\n        <label html-for=\"warriors\"> Warriors: </label><input className=\"numbox\" type=\"number\" id=\"warriors\" name=\"warriors\" min=\"0\" defaultValue=\"2\" onChange={this.handleInputChange} value={this.state.warriors} />\n        <label html-for=\"wizards\"> Wizards: </label><input className=\"numbox\" type=\"number\" id=\"wizards\" name=\"wizards\" min=\"0\" defaultValue=\"1\" onChange={this.handleInputChange} value={this.state.wizards} />\n        <label html-for=\"paragons\"> Wilds: </label><input className=\"numbox\" type=\"number\" id=\"paragons\" name=\"paragons\" min=\"0\" defaultValue=\"0\" onChange={this.handleInputChange} value={this.state.wilds} />\n      </div>\n      <StackedBarChart\n              data={data}\n              series={\n                <StackedBarSeries\n                  bar={\n                    <Bar\n                      key=\"stacked-normalized-bar\"\n                      rx={0}\n                      ry={0}\n                      rounded={false}\n                      padding={0}\n                      gradient={false}\n                      rangeLines={<RangeLines position=\"top\" strokeWidth={3} />}\n                      guide={false}\n                    />\n                  }\n                  colorScheme={[\"#1f77b4\", \"#aec7e8\", \"#ff7f0e\", \"#ffbb78\", \"#2ca02c\"]}\n                />\n              }\n              height={450} />\n      <div className=\"legend\">\n        <div className=\"legendEntry\">\n          <svg width=\"20\" height=\"20\">\n            <rect width=\"20\" height=\"20\" style={{fill: \"#1f77b4\"}} />\n          </svg> = Party of 0\n        </div>\n        <div className=\"legendEntry\">\n          <svg width=\"20\" height=\"20\">\n            <rect width=\"20\" height=\"20\" style={{fill: \"#aec7e8\"}} />\n          </svg> = Party of 1\n        </div>\n        <div className=\"legendEntry\">\n          <svg width=\"20\" height=\"20\">\n            <rect width=\"20\" height=\"20\" style={{fill: \"#ff7f0e\"}} />\n          </svg> = Party of 2\n          </div>\n        <div className=\"legendEntry\">\n          <svg width=\"20\" height=\"20\">\n            <rect width=\"20\" height=\"20\" style={{fill: \"#ffbb78\"}} />\n          </svg> = Party of 3\n          </div>\n        <div className=\"legendEntry\">\n          <svg width=\"20\" height=\"20\">\n            <rect width=\"20\" height=\"20\" style={{fill: \"#2ca02c\"}} />\n          </svg> = Party of 4\n        </div>\n      </div>\n      <div className=\"form\">\n        <label html-for=\"upload\"> Paste deck: </label><textarea className=\"upload\" type=\"string\" id=\"upload\" name=\"upload\" onChange={this.handleInputChange} />\n      </div>\n      <div className=\"form page\">\n        Already Have -\n        <label html-for=\"haveclerics\"> Clerics:</label><input className=\"checkbox\" type=\"checkbox\" id=\"haveclerics\" name=\"haveclerics\" onClick={this.handleClick} />\n        <label html-for=\"haverogues\"> Rogues:</label><input className=\"checkbox\" type=\"checkbox\" id=\"haverogues\" name=\"haverogues\" onClick={this.handleClick} />\n        <label html-for=\"havewarriors\"> Warriors:</label><input className=\"checkbox\" type=\"checkbox\" id=\"havewarriors\" name=\"havewarriors\" onClick={this.handleClick} />\n        <label html-for=\"havewizards\"> Wizards:</label><input className=\"checkbox\" type=\"checkbox\" id=\"havewizards\" name=\"havewizards\" onClick={this.handleClick} />\n        <label html-for=\"haveparagons\"> Wilds: </label><input className=\"numbox\" type=\"number\" id=\"haveparagons\" name=\"haveparagons\" min=\"0\" defaultValue=\"0\" onChange={this.handleInputChange} />\n      </div>\n    </div>;\n  }\n}","import React from 'react';\nimport './App.css';\nimport Odds from './components/Odds';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Odds />\n      </header> \n    </div>\n  );\n        // <label for=\"paragons\"> Paragons: <input class=\"paragons\" type=\"number\" id=\"paragons\" name=\"paragons\" min=\"0\" /></label>\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nrender(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}